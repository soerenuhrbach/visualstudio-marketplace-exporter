name: Release

on:
  push:
    tags:
      - '*'

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  CI: true
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BINARY_NAME: 'visualstudio_marketplace_exporter'
  GO_VERSION: 1.23.2

jobs:
  release-docker:
    name: Publish docker images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/386
          - linux/amd64
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV    
          
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get tag as version
        id: version
        run: echo "{tag}=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.sha }}
            type=raw,value=${{ steps.version.outputs.tag }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        id: build
        with:
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Export build digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"          
      
      - name: Upload build digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-docker-images:
    runs-on: ubuntu-latest
    needs:
      - release-docker
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Get tag as version
        id: version
        run: echo "{tag}=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.sha }}
            type=raw,value=${{ steps.version.outputs.tag }}
      
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.IMAGE_NAME }}@sha256:%s ' *)          
      
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}  

  # release:
  #   runs-on: ubuntu-latest
  #   needs: release-docker
  #   steps:
  #     - name: Create release
  #       id: create
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: ${{ github.ref }}
  #         draft: false
  #         prerelease: false
  #   outputs:
  #     upload_url: ${{ steps.create.outputs.upload_url }}

  # upload:
  #   needs: release
  #   strategy:
  #     matrix:
  #       include:
  #         - os: ubuntu-latest
  #           goos: linux
  #           goarch: 386
  #         - os: ubuntu-latest
  #           goos: linux
  #           goarch: amd64
  #         - os: ubuntu-latest
  #           goos: linux
  #           goarch: arm
  #         - os: macos-latest
  #           goos: darwin
  #           goarch: amd64
  #         - os: macos-latest
  #           goos: darwin
  #           goarch: arm64
  #         - os: ubuntu-latest
  #           goos: windows
  #           goarch: 386
  #           extension: '.exe'
  #         - os: ubuntu-latest
  #           goos: windows
  #           goarch: amd64
  #           extension: '.exe'
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-go@v3
  #       with:
  #         go-version: ${{ env.GO_VERSION }}

  #     - name: Download dependencies
  #       run: go get -t -v ./...

  #     - name: Build release binary
  #       run: GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags "-s -w" -o ${{ env.BINARY_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.extension }} ./
   
  #     - name: Upload assets
  #       id: upload-release-asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ needs.release.outputs.upload_url }}${{ matrix.extension }}
  #         asset_path: ./${{ env.BINARY_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.extension }}
  #         asset_name: ${{ env.BINARY_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.extension }}
  #         asset_content_type: application/octet-stream
      
  #     - name: Create SHA256 sum
  #       run: sha256sum ${{ env.BINARY_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.extension }} > ${{ env.BINARY_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.extension }}.sha256.txt
        
  #     - name: Upload release assets
  #       id: upload-release-sum-asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ needs.release.outputs.upload_url }}${{ matrix.extension }}.sha256.txt
  #         asset_path: ./${{ env.BINARY_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.extension }}.sha256.txt
  #         asset_name: ${{ env.BINARY_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.extension }}.sha256.txt
  #         asset_content_type: application/octet-stream